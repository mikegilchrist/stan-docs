---
pagetitle: Variable Transformation Functions
---

# Variable Transformation Functions

Variable transformation functions provide implementations of the built-in constraining
and unconstraining transforms defined in [Stan Reference Manual](https://mc-stan.org/docs/reference-manual/transforms.html).

For each of the built-in variable transforms there are three functions
named after the transform with differing suffixes. A `_unconstrain` function
that maps from the constrained space back to free variables (the "transform"),
A `_constrain` function that maps from free variables to constrained variables
(the "inverse transform"), and a
[`_jacobian` function](https://mc-stan.org/docs/reference-manual/statements.html#increment-log-density-with-a-change-of-variables-adjustment),
which computes the same value as the `_constrain` function while also
incrementing the Jacobian accumulator with the log Jacobian determinant.

For this page, variables named `y` are unconstrained, while variables named `x`
are in the constrained space. The unconstraining functions will reject if their
input does not satisfy the declared constraint.

## Transforms for scalars

These transformations take unconstrained values on the real number line and
either constrain the, to a subset of the real line with a lower bound, upper bound, or both,
or provide an affine map that does not constrain values but can help with shifting
and scaling them so they are more standardized.

The functions are all overloaded to apply to containers elementwise. If the `y` argument is
a container, the others must be either scalars or containers of exactly the same size.

### Lower bounds

These functions perform the transform and inverse transform described in the
[Lower Bounded Scalar section](https://mc-stan.org/docs/reference-manual/transforms.html#lower-bound-transform.section).

<!-- reals; lower_bound_constrain; (reals y, reals lb); -->
\index{{\tt \bfseries lower\_bound\_constrain }!{\tt (reals y, reals lb): reals}|hyperpage}

`reals` **`lower_bound_constrain`**`(reals y, reals lb)`<br>\newline
Takes a value `y` and lower bound `lb` and returns the corresponding value
which is greater than `lb` (except for the possibility of rounding due to
numeric precision issues, in which case it will be equal to the bound).

{{< since 2.37 >}}

<!-- reals; lower_bound_jacobian; (reals y, reals lb); -->
\index{{\tt \bfseries lower\_bound\_jacobian }!{\tt (reals y, reals lb): reals}|hyperpage}

`reals` **`lower_bound_jacobian`**`(reals y, reals lb)`<br>\newline
Takes a value `y` and lower bound `lb` and returns the corresponding value
which is greater than `lb` (except for the possibility of rounding due to
numeric precision issues, in which case it will be equal to the bound).

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- reals; lower_bound_unconstrain; (reals x, reals lb); -->
\index{{\tt \bfseries lower\_bound\_unconstrain }!{\tt (reals x, reals lb): reals}|hyperpage}

`reals` **`lower_bound_unconstrain`**`(reals x, reals lb)`<br>\newline
Takes a value `x` which is greater than `lb` and returns the corresponding
unconstrained value.
{{< since 2.37 >}}

### Upper bounds

These functions perform the transform and inverse transform described in the
[Upper Bounded Scalar section](https://mc-stan.org/docs/reference-manual/transforms.html#upper-bounded-scalar).

<!-- reals; upper_bound_constrain; (reals y, reals ub); -->
\index{{\tt \bfseries upper\_bound\_constrain }!{\tt (reals y, reals ub): reals}|hyperpage}

`reals` **`upper_bound_constrain`**`(reals y, reals ub)`<br>\newline
Takes a value `y` and upper bound `ub` and returns the corresponding value
which is less than `ub` (except for the possibility of rounding due to
numeric precision issues, in which case it will be equal to the bound).
{{< since 2.37 >}}

<!-- reals; upper_bound_jacobian; (reals x, reals ub); -->
\index{{\tt \bfseries upper\_bound\_jacobian }!{\tt (reals x, reals ub): reals}|hyperpage}

`reals` **`upper_bound_jacobian`**`(reals x, reals ub)`<br>\newline
Takes a value `y` and upper bound `ub` and returns the corresponding value
which is less than `ub` (except for the possibility of rounding due to
numeric precision issues, in which case it will be equal to the bound).

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- reals; upper_bound_unconstrain; (reals x, reals ub); -->
\index{{\tt \bfseries upper\_bound\_unconstrain }!{\tt (reals x, reals ub): reals}|hyperpage}

`reals` **`upper_bound_unconstrain`**`(reals x, reals ub)`<br>\newline
Takes a value `x` which is less than `ub` and returns the corresponding
unconstrained value.
{{< since 2.37 >}}

### Upper and lower bounds

These functions perform the transform and inverse transform described in the
[Lower and Upper Bounded Scalar section](https://mc-stan.org/docs/reference-manual/transforms.html#logit-transform-jacobian.section).

<!-- reals; lower_upper_bound_constrain; (reals y, reals lb, reals ub); -->
\index{{\tt \bfseries lower\_upper\_bound\_constrain }!{\tt (reals y, reals lb, reals ub): reals}|hyperpage}

`reals` **`lower_upper_bound_constrain`**`(reals y, reals lb, reals ub)`<br>\newline
Takes a value `y`, lower bound `lb`, and upper bound `ub` and returns the corresponding value
which is bounded between `lb` and `ub` (except for the possibility of rounding due to
numeric precision issues, in which case it will be equal to the bound).
{{< since 2.37 >}}

<!-- reals; lower_upper_bound_jacobian; (reals y, reals lb, reals ub); -->
\index{{\tt \bfseries lower\_upper\_bound\_jacobian }!{\tt (reals y, reals lb, reals ub): reals}|hyperpage}

`reals` **`lower_upper_bound_jacobian`**`(reals y, reals lb, reals ub)`<br>\newline
Takes a value `y`, lower bound `lb`, and upper bound `ub` and returns the corresponding value
which is bounded between `lb` and `ub` (except for the possibility of rounding due to
numeric precision issues, in which case it will be equal to the bound).

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}
<!-- reals; lower_upper_bound_unconstrain; (reals x, reals lb, reals ub); -->
\index{{\tt \bfseries lower\_upper\_bound\_unconstrain }!{\tt (reals x, reals lb, reals ub): reals}|hyperpage}

`reals` **`lower_upper_bound_unconstrain`**`(reals x, reals lb, reals ub)`<br>\newline
Takes a value `x` which is bounded between `lb` and `ub` and returns returns the corresponding
unconstrained value.
{{< since 2.37 >}}

### Affine transforms

These functions perform the transform and inverse transform described in the
[Affinely Transformed Scalar section](https://mc-stan.org/docs/reference-manual/transforms.html#affinely-transformed-scalar).

<!-- reals; offset_multiplier_constrain; (reals y, reals offset, reals mult); -->
\index{{\tt \bfseries offset\_multiplier\_constrain }!{\tt (reals y, reals offset, reals mult): reals}|hyperpage}

`reals` **`offset_multiplier_constrain`**`(reals y, reals offset, reals mult)`<br>\newline
Takes a value `y`, shift `offset`, and scale `mult` and returns a rescaled and shifted value.
{{< since 2.37 >}}

<!-- reals; offset_multiplier_jacobian; (reals y, reals offset, reals mult); -->
\index{{\tt \bfseries offset\_multiplier\_jacobian }!{\tt (reals y, reals offset, reals mult): reals}|hyperpage}

`reals` **`offset_multiplier_jacobian`**`(reals y, reals offset, reals mult)`<br>\newline
Takes a value `y`, shift `offset`, and scale `mult` and returns a rescaled and shifted value.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- reals; offset_multiplier_unconstrain; (reals x, reals offset, reals mult); -->
\index{{\tt \bfseries offset\_multiplier\_unconstrain }!{\tt (reals x, reals offset, reals mult): reals}|hyperpage}

`reals` **`offset_multiplier_unconstrain`**`(reals x, reals offset, reals mult)`<br>\newline
Takes a value `x`, shift `offset`, and scale `mult` and a value which has been un-scaled
and un-shifted.
{{< since 2.37 >}}

## Transforms for constrained vectors

These functions constrain entire vectors hollistically.
Some transforms also change the length of the vector, as noted in the documentation.

Where `vectors` is used, this indicates that either a `vector`
or a (possibly multidimensional) array of `vector`s may be
provided. The array will be processed element by element.

### Ordered vectors

These functions perform the transform and inverse transform described in the
[Ordered Vector section](https://mc-stan.org/docs/reference-manual/transforms.html#ordered-vector).

<!-- vectors; ordered_constrain; (vectors y); -->
\index{{\tt \bfseries ordered\_constrain }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`ordered_constrain`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a vector with elements in ascending order.
{{< since 2.37 >}}

<!-- vectors; ordered_jacobian; (vectors y); -->
\index{{\tt \bfseries ordered\_jacobian }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`ordered_jacobian`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a vector with elements in ascending order.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- vectors; ordered_unconstrain; (vectors x); -->
\index{{\tt \bfseries ordered\_unconstrain }!{\tt (vectors x): vectors}|hyperpage}

`vectors` **`ordered_unconstrain`**`(vectors x)`<br>\newline
Takes an ordered vector `x` and returns the corresponding free vector.
{{< since 2.37 >}}

### Positive order vectors

These functions perform the transform and inverse transform described in the
[Positive Ordered Vector section](https://mc-stan.org/docs/reference-manual/transforms.html#positive-ordered-vector).

<!-- vectors; positive_ordered_constrain; (vectors y); -->
\index{{\tt \bfseries positive\_ordered\_constrain }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`positive_ordered_constrain`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a vector with positive elements in ascending order.
{{< since 2.37 >}}

<!-- vectors; positive_ordered_jacobian; (vectors y); -->
\index{{\tt \bfseries positive\_ordered\_jacobian }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`positive_ordered_jacobian`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a vector with positive elements in ascending order.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- vectors; positive_ordered_unconstrain; (vectors x); -->
\index{{\tt \bfseries positive\_ordered\_unconstrain }!{\tt (vectors x): vectors}|hyperpage}

`vectors` **`positive_ordered_unconstrain`**`(vectors x)`<br>\newline
Takes an ordered vector `x` with positive entries and returns the corresponding free vector.
{{< since 2.37 >}}

### Simplexes

These functions perform the transform and inverse transform described in the
[Unit Simplex section](https://mc-stan.org/docs/reference-manual/transforms.html#simplex-transform.section).

<!-- vectors; simplex_constrain; (vectors y); -->
\index{{\tt \bfseries simplex\_constrain }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`simplex_constrain`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a simplex (a vector such that each element
is between `0` and `1`, and the sum of the elements is `1`, up to rounding errors).

This returned vector will have one extra element compared to the input `y`.
{{< since 2.37 >}}

<!-- vectors; simplex_jacobian; (vectors y); -->
\index{{\tt \bfseries simplex\_jacobian }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`simplex_jacobian`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a simplex (a vector such that each element
is between `0` and `1`, and the sum of the elements is `1`, up to rounding errors).

This returned vector will have one extra element compared to the input `y`.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- vectors; simplex_unconstrain; (vectors x); -->
\index{{\tt \bfseries simplex\_unconstrain }!{\tt (vectors x): vectors}|hyperpage}

`vectors` **`simplex_unconstrain`**`(vectors x)`<br>\newline
Takes a simplex `x` and returns the corresponding free vector.

This returned vector will have one fewer elements compared to the input `x`.
{{< since 2.37 >}}

### Sum-to-zero vectors

These functions perform the transform and inverse transform described in the
[Zero Sum Vector section](https://mc-stan.org/docs/reference-manual/transforms.html#sum-to-zero-vector).

<!-- vectors; sum_to_zero_constrain; (vectors y); -->
\index{{\tt \bfseries sum\_to\_zero\_constrain }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`sum_to_zero_constrain`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a vector such that the elements
sum to `0`.

This returned vector will have one extra element compared to the input `y`.
{{< since 2.37 >}}

<!-- vectors; sum_to_zero_jacobian; (vectors y); -->
\index{{\tt \bfseries sum\_to\_zero\_jacobian }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`sum_to_zero_jacobian`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a vector such that the elements
sum to `0`.

The returned vector will have one extra element compared to the input `y`.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- vectors; sum_to_zero_unconstrain; (vectors x); -->
\index{{\tt \bfseries sum\_to\_zero\_unconstrain }!{\tt (vectors x): vectors}|hyperpage}

`vectors` **`sum_to_zero_unconstrain`**`(vectors x)`<br>\newline
Takes a vector `x` with elements that sum to `0` and returns the
corresponding free vector.

This returned vector will have one fewer elements compared to the input `x`.
{{< since 2.37 >}}

### Unit vectors

These functions perform the transform and inverse transform described in the
[Unit Vector section](https://mc-stan.org/docs/reference-manual/transforms.html#unit-vector.section).

<!-- vectors; unit_vectors_constrain; (vectors y); -->
\index{{\tt \bfseries unit\_vectors\_constrain }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`unit_vectors_constrain`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a vector with unit length, i.e.,
`norm2(unit_vectors_constrain(y)) == 1` for any `y` that has a positive
and finite norm itself (if `y` does not, the function rejects).
Note that, in particular, this implies the function rejects if given a vector of all zeros.
{{< since 2.37 >}}

<!-- vectors; unit_vectors_jacobian; (vectors y); -->
\index{{\tt \bfseries unit\_vectors\_jacobian }!{\tt (vectors y): vectors}|hyperpage}

`vectors` **`unit_vectors_jacobian`**`(vectors y)`<br>\newline
Takes a free vector `y` and returns a vector with unit length.
This function rejects if given a vector of all zeros.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- vectors; unit_vectors_unconstrain; (vectors x); -->
\index{{\tt \bfseries unit\_vectors\_unconstrain }!{\tt (vectors x): vectors}|hyperpage}

`vectors` **`unit_vectors_unconstrain`**`(vectors x)`<br>\newline
Takes a vector `x` of unit length and returns the corresponding free vector.
{{< since 2.37 >}}

## Transforms for constrained matrices

Similarly to the above, `vectors` means a `vector` or array thereof,
and `matrices` means a `matrix` or array thereof.

### Cholesky factors of correlation matrices


These functions perform the transform and inverse transform described in the
[Cholesky Factors of Correlation Matrices section](https://mc-stan.org/docs/reference-manual/transforms.html#cholesky-factors-of-correlation-matrices).

<!-- matrices; cholesky_factor_corr_constrain; (vectors y, int K); -->
\index{{\tt \bfseries cholesky\_factor\_corr\_constrain }!{\tt (vectors y, int K): matrices}|hyperpage}

`matrices` **`cholesky_factor_corr_constrain`**`(vectors y, int K)`<br>\newline
Takes a vector `y` and integer `K`, where `length(y) == choose(K, 2)`, and returns
a `K` by `K` Cholesky factor of a correlation matrix. This matrix is a Cholesky factor
of a covariance matrix (i.e., a lower triangular matrix with a strictly positive diagonal),
but with the additional constraint that each row is of unit length.
{{< since 2.37 >}}

<!-- matrices; cholesky_factor_corr_jacobian; (vectors y, int K); -->
\index{{\tt \bfseries cholesky\_factor\_corr\_jacobian }!{\tt (vectors y, int K): matrices}|hyperpage}
Takes a vector `y` and integer `K`, where `length(y) == choose(K, 2)`, and returns
a `K` by `K` Cholesky factor of a correlation matrix.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
`matrices` **`cholesky_factor_corr_jacobian`**`(vectors y, int K)`<br>\newline

{{< since 2.37 >}}

<!-- vectors; cholesky_factor_corr_unconstrain; (matrices x); -->
\index{{\tt \bfseries cholesky\_factor\_corr\_unconstrain }!{\tt (matrices x): vectors}|hyperpage}

`vectors` **`cholesky_factor_corr_unconstrain`**`(matrices x)`<br>\newline
Takes `x`, a ($K \times K$) matrix which is the Cholesky factor of a
correlation matrix (a lower triangular matrix with a strictly positive
diagonal and each row having unit length),
and returns the corresponding free vector of length $ 	imes $.
{{< since 2.37 >}}

### Cholesky factors of covariance matrices

These functions perform the transform and inverse transform described in the
[Cholesky Factors of Covariance Matrices section](https://mc-stan.org/docs/reference-manual/transforms.html#cholesky-factors-of-covariance-matrices).

<!-- matrices; cholesky_factor_cov_constrain; (vectors y, int M, int N); -->
\index{{\tt \bfseries cholesky\_factor\_cov\_constrain }!{\tt (vectors y, int M, int N): matrices}|hyperpage}

`matrices` **`cholesky_factor_cov_constrain`**`(vectors y, int M, int N)`<br>\newline
Takes a free vector `y` and integers `M` and `N` and returns the `M` by `N` Cholesky
factor of a covariance matrix. This matrix is a lower triangular matrix $L$, with a strictly
positive diagonal, such that $L^T L$ is positive definite.

Note that `y` must have length `N + choose(N, 2) + (M - N) * N`,
and `M` must be greater than or equal to `N`.
{{< since 2.37 >}}

<!-- matrices; cholesky_factor_cov_jacobian; (vectors y, int M, int N); -->
\index{{\tt \bfseries cholesky\_factor\_cov\_jacobian }!{\tt (vectors y, int M, int N): matrices}|hyperpage}

`matrices` **`cholesky_factor_cov_jacobian`**`(vectors y, int M, int N)`<br>\newline
Takes a free vector `y` and integers `M` and `N` and returns the `M` by `N` Cholesky
factor of a covariance matrix. This matrix is a lower triangular matrix $L$, with a strictly
positive diagonal, such that $L^T L$ is positive definite.

Note that `y` must have length `N + choose(N, 2) + (M - N) * N`,
and `M` must be greater than or equal to `N`.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- vectors; cholesky_factor_cov_unconstrain; (matrices x); -->
\index{{\tt \bfseries cholesky\_factor\_cov\_unconstrain }!{\tt (matrices x): vectors}|hyperpage}

`vectors` **`cholesky_factor_cov_unconstrain`**`(matrices x)`<br>\newline
Takes a $M \times N$ matrix `x` which is a Cholesky factor of a covariance matrix
(a matrix $L$ such that $L^T L$ is positive definite) and returns
the corresponding free vector of length $N + \binom{N}{2} + (M - N)N$.

{{< since 2.37 >}}

### Correlation matrices

These functions perform the transform and inverse transform described in the
[Correlation Matrices section](https://mc-stan.org/docs/reference-manual/transforms.html#correlation-matrix-transform.section).

<!-- matrices; corr_matrix_constrain; (vectors y, int K); -->
\index{{\tt \bfseries corr\_matrix\_constrain }!{\tt (vectors y, int K): matrices}|hyperpage}

`matrices` **`corr_matrix_constrain`**`(vectors y, int K)`<br>\newline
Takes a vector `y` and integer `K`, where `length(y) == choose(K, 2)`, and returns
a `K` by `K` correlation matrix (a positive definite matrix with a unit diagonal).
{{< since 2.37 >}}

<!-- matrices; corr_matrix_jacobian; (vectors y, int K); -->
\index{{\tt \bfseries corr\_matrix\_jacobian }!{\tt (vectors y, int K): matrices}|hyperpage}

`matrices` **`corr_matrix_jacobian`**`(vectors y, int K)`<br>\newline
Takes a vector `y` and integer `K`, where `length(y) == choose(K, 2)`, and returns
a `K` by `K` correlation matrix (a positive definite matrix with a unit diagonal).

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- vectors; corr_matrix_unconstrain; (matrices x); -->
\index{{\tt \bfseries corr\_matrix\_unconstrain }!{\tt (matrices x): vectors}|hyperpage}

`vectors` **`corr_matrix_unconstrain`**`(matrices x)`<br>\newline
Takes a $K \times K$ matrix `x` which is a correlation matrix (a positive definite
matrix with a unit diagonal) and returns the corresponding free vector of
size $\binom{K}{2}$.
{{< since 2.37 >}}

### Covariance matrices

These functions perform the transform and inverse transform described in the
[Covariance Matrices section](https://mc-stan.org/docs/reference-manual/transforms.html#covariance-matrices).

<!-- matrices; cov_matrix_constrain; (vectors y, int K); -->
\index{{\tt \bfseries cov\_matrix\_constrain }!{\tt (vectors y, int K): matrices}|hyperpage}

`matrices` **`cov_matrix_constrain`**`(vectors y, int K)`<br>\newline
Takes a vector `y` and integer `K`, where `length(y) == K + choose(K, 2)`, and returns
a `K` by `K` covariance matrix (a positive definite matrix).
{{< since 2.37 >}}

<!-- matrices; cov_matrix_jacobian; (vectors y, int K); -->
\index{{\tt \bfseries cov\_matrix\_jacobian }!{\tt (vectors y, int K): matrices}|hyperpage}

`matrices` **`cov_matrix_jacobian`**`(vectors y, int K)`<br>\newline
Takes a vector `y` and integer `K`, where `length(y) == K + choose(K, 2)`, and returns
a `K` by `K` covariance matrix (a positive definite matrix).

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- vectors; cov_matrix_unconstrain; (matrices x); -->
\index{{\tt \bfseries cov\_matrix\_unconstrain }!{\tt (matrices x): vectors}|hyperpage}

`vectors` **`cov_matrix_unconstrain`**`(matrices x)`<br>\newline
Takes a $K \times K$ positive definite matrix `x` and returns the corresponding
free vector of size $K + \binom{K}{2}$.
{{< since 2.37 >}}

### Column-stochastic matrices

These functions perform the transform and inverse transform described in the
[Stochastic Matrix section](https://mc-stan.org/docs/reference-manual/transforms.html#stochastic-matrix-transform.section)
for column (left) stochastic matrices.

<!-- matrices; stochastic_column_constrain; (matrices y); -->
\index{{\tt \bfseries stochastic\_column\_constrain }!{\tt (matrices y): matrices}|hyperpage}

`matrices` **`stochastic_column_constrain`**`(matrices y)`<br>\newline
Takes a free matrix `y` of size $N \times M$ and returns a left stochastic matrix
(a matrix where each column is a simplex) of size $N+1 \times M$.
{{< since 2.37 >}}

<!-- matrices; stochastic_column_jacobian; (matrices y); -->
\index{{\tt \bfseries stochastic\_column\_jacobian }!{\tt (matrices y): matrices}|hyperpage}

`matrices` **`stochastic_column_jacobian`**`(matrices y)`<br>\newline
Takes a free matrix `y` of size $N \times M$ and returns a left stochastic matrix
(a matrix where each column is a simplex) of size $N+1 \times M$.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- matrices; stochastic_column_unconstrain; (matrices x); -->
\index{{\tt \bfseries stochastic\_column\_unconstrain }!{\tt (matrices x): matrices}|hyperpage}

`matrices` **`stochastic_column_unconstrain`**`(matrices x)`<br>\newline
Takes a left stochastic matrix `x` of size $N+1 \times M$ and returns the corresponding
free matrix of size $N \times M$.
{{< since 2.37 >}}

### Row-stochastic matrices

These functions perform the transform and inverse transform described in the
[Stochastic Matrix section](https://mc-stan.org/docs/reference-manual/transforms.html#stochastic-matrix-transform.section)
for row (right) stochastic matrices.

<!-- matrices; stochastic_row_constrain; (matrices y); -->
\index{{\tt \bfseries stochastic\_row\_constrain }!{\tt (matrices y): matrices}|hyperpage}

`matrices` **`stochastic_row_constrain`**`(matrices y)`<br>\newline
Takes a free matrix `y` of size $N \times M$ and returns a right stochastic matrix
(a matrix where each row is a simplex) of size $N \times M+1$.
{{< since 2.37 >}}

<!-- matrices; stochastic_row_jacobian; (matrices y); -->
\index{{\tt \bfseries stochastic\_row\_jacobian }!{\tt (matrices y): matrices}|hyperpage}

`matrices` **`stochastic_row_jacobian`**`(matrices y)`<br>\newline
Takes a free matrix `y` of size $N \times M$ and returns a right stochastic matrix
(a matrix where each row is a simplex) of size $N \times M+1$.

This function also increments the Jacobian accumulator
with the corresponding change of variables adjustment.
{{< since 2.37 >}}

<!-- matrices; stochastic_row_unconstrain; (matrices x); -->
\index{{\tt \bfseries stochastic\_row\_unconstrain }!{\tt (matrices x): matrices}|hyperpage}

`matrices` **`stochastic_row_unconstrain`**`(matrices x)`<br>\newline
Takes a right stochastic matrix `x` of size $N \times M+1$ and returns the corresponding
free matrix of size $N \times M$.
{{< since 2.37 >}}

### Sum-to-zero matrices
The sum-to-zero matrix transforms map between unconstrained values and matrices whose rows and columns sum to zero; full definitions of the function and Jacobian can be found in the
[sum-to-zero matrix section of the *Reference Manual*](https://mc-stan.org/docs/reference-manual/transforms.html#sum-to-zero-matrix-transform).

<!-- matrices; sum_to_zero_constrain; (matrices y); -->
\index{{\tt \bfseries sum\_to\_zero\_constrain }!{\tt (matrices y): matrices}|hyperpage}

`matrices` **`sum_to_zero_constrain`**`(matrices y)`<br>\newline
The constraining function maps an unconstrained `N x M` matrix to an `(N + 1) x (M + 1)` matrix for which the rows and columns all sum to zero. This function covers the incrementation of the log Jacobian because the incrementation is zero.

This returned matrix will have one extra row and column compared to the input `y`.
{{< since 2.37 >}}

<!-- matrices; sum_to_zero_jacobian; (matrices y); -->
\index{{\tt \bfseries sum\_to\_zero\_jacobian }!{\tt (matrices y): matrices}|hyperpage}

`matrices` **`sum_to_zero_jacobian`**`(matrices y)`<br>\newline
The constraining function maps an unconstrained `N x M` matrix to an `(N + 1) x (M + 1)` matrix for which the rows and columns all sum to zero. Because the log Jacobian incrementation is zero, this is identical to `sum_to_zero_constrain`.

This returned matrix will have one extra row and column compared to the input `y`.
{{< since 2.37 >}}


<!-- matrices; sum_to_zero_unconstrain; (matrices x); -->
\index{{\tt \bfseries sum\_to\_zero\_unconstrain }!{\tt (matrices x): matrices}|hyperpage}

`matrices` **`sum_to_zero_unconstrain`**`(matrices x)`<br>\newline
This function maps a matrix with rows that sum to zero and columns that sum to zero to an unconstrained matrix with one fewer row and and one fewer column.

{{< since 2.37 >}}
